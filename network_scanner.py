'''Network scanning utility
This program uses scapy library to provide four functions:
    a- scan a given host to tell whether it is up
    b- scan a given port to tell whether it is open
    c- scan a given port to tell whether it is running an http server
    d- scan a given port to tell whether it is running an ftp server
'''
import warnings
from cryptography.utils import CryptographyDeprecationWarning
warnings.filterwarnings("ignore", category=CryptographyDeprecationWarning)

from scapy.all import *
import argparse

'''Function checks if the host is up
'ip' is ipv4 as a string (e.g., '192.168.1.11')
returns string that contain "<ip_addres> is <up|down>" '''
def scan_host(ip):
    p = ARP(pdst=ip)
    ans = sr1(p, timeout=1)
    if ans!= None:
        ans.display()
        print(ip, "is up")
    else:
        print(ip, "is down")


'''Function checks if the port is open. Performs both tcp (xmas) & udp scan
'ip' is ipv4 as a string (e.g., '192.168.1.11')
'port' is the port as an integer
returns string "<tcp|udp> scan indicates <port_num> on <ip_address> is open" '''
def scan_port(ip, port):
    ans = sr1(ARP(pdst=ip), timeout=1)
    if ans!= None:

        pkt = sr1(IP(dst=ip)/UDP(sport=int(port[0]),dport=int(port[0])), timeout=5, verbose=0)
        time.sleep(1)
        pkt_tcp = sr1(IP(dst=ip)/TCP(dport=int(port[0]), flags="S"), timeout=1, verbose=0)
        if pkt == None:
            print("UDP scan indicates", port[0], "on", ip, "is open")
        else:
            if pkt.haslayer(UDP):
                print("UDP scan indicates", port[0], "on", ip, "is open / filtered")
            elif pkt.haslayer(ICMP):
                print("UDP scan indicates", port[0], "on", ip, "is close")
            else:
                print("UDP scan indicates", port[0], "on", ip, "is unknown")

        if pkt_tcp != None:
            if pkt_tcp.haslayer(TCP) and pkt_tcp[TCP].flags == 20:
                    print("TCP scan indicates", port[0], "on", ip, "is close")
            elif pkt_tcp.haslayer(TCP) and pkt_tcp[TCP].flags == 18:
                    print("TCP scan indicates", port[0], "on", ip, "is open")
            elif pkt_tcp.haslayer(ICMP):
                print("TCP scan indicates", port[0], "on", ip, "is ICMP resp / filtered")
            else:
                print("TCP scan indicates", port[0], "on", ip, "is unknown")
        else:
            print("TCP scan indicates", port[0], "on", ip, "is open / filtered")

    else:
        print(ip, "is down")

'''Function checks if an http server is running on 'port'
'ip' is ipv4 as a string (e.g., '192.168.1.11')
'port' is the port as an integer
returns string "<Found|Not found> http server on <port_num> on <ip_address>" '''

def scan_http_server(ip, port):
    s=socket.socket()
    try:
        s.connect((ip, int(port[0])))
        ss=StreamSocket(s,Raw)
        pkt = ss.sr1(Raw("GET /\r\n"))
             
        if pkt.haslayer(Raw) and b"HTTP" in pkt[Raw].load:
            print("Found http server on", port[0], "on", ip)        
        else:
            print("Not found http server on", port[0], "on", ip)

    except:
        print("Not found http server on", port[0], "on", ip)

'''Function checks if an ftp server is running on 'port'
'ip' is ipv4 as a string (e.g., '192.168.1.11')
'port' is the port as an integer
returns string "<Found|Not found> ftp server on <port_num> on <ip_address>" '''

def scan_ftp_server(ip, port):

    s=socket.socket()
    try:
        s.connect((ip, int(port[0])))
        ss=StreamSocket(s,Raw)
        pkt = ss.recv()
    
        if pkt.haslayer(Raw) and '220' in pkt[Raw].load.decode():
            print("Found ftp server on", port[0], "on", ip)
        else:  
            print("Not found ftp server on", port[0], "on", ip)

    except:
        print("Not found ftp server on", port[0], "on", ip)

if __name__ == '__main__':
    parser = argparse.ArgumentParser()

    parser.add_argument('-s', action='store', dest='scan_type',
            help='scan type <host|port|http|ftp>', required=True)

    parser.add_argument('-t', action='store', dest='target',
            help='target_ipv4_address:port', required=True)

    parser.add_argument('--version', action='version', version='%(prog)s 1.0')

    args = parser.parse_args()

    scan_type = args.scan_type
    target = args.target.split(':')[0]
    ports = args.target.split(':')[1].split(',')

    if scan_type == "host":
        scan_host(target)
    elif scan_type == "port":
        scan_port(target, ports)
    elif scan_type == "http":
        scan_http_server(target, ports)
    elif scan_type == "ftp":
        scan_ftp_server(target, ports)
    else:
        print("No such type")

